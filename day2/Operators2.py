a = 7  # 00001000
b = 5  # 00000101
c = a & b
print(c)

c = a | b
print(c)

# 비트연산자. 내용이었음.
"""
& 비트논리곱
| 비트논리합
^ 비트 xor 연산 -> 둘중 하나라도 다르면 1. 등..
~ 비트 논리부정

쉬프트 연산자
<< 좌측 쉬프트 연산을 수행
>> 우측 쉬프트 연산을 수행

1<<3 1값을 왼쪽으로 3번 이동해라.
"""

a = 7  # 00000111
b = a << 2  # 000011100 이됨. >> 하면 1이 어디가는게 아니고 그냥 사라짐
print(b)

b = a >> 2
print(b)  # 00000111 이 00000001 되니까 1

""" 뭐 잘 안쓴다함 이런거는 """

a = 10
b = 10
print(id(a))
print(id(b))
print(a is b)  # 이때 a와 b의 아이디는 같음. 같은 10을 a와 b가 함께 바라보고 있는 거임.
# is 는 이 id가 근본이 같냐 틀리냐를 검사함. 값만 보고 비교하는게 아님. ==는 그냥 값만 비교하는 것.

""" format() 함수의 활용 (문자열연산자) """

name = '홍길동'
age = 30
c = 3/3
print('나의 이름은 %s 입니다.' % name)
print('나의 이름은 %s 이고 나이는 %d 입니다.' % (name, age))  # 2개이상은 튜플을 사용함
print('나의 이름은 %s 이고 나이는 %d 입니다.' % (name, age))
print('나의 이름은 %s 이고 나이는 %d 입니다 %f' % (name, age, c))

"""
포맷코드 
%s 문자열
%c 문자
%d 정수 등.. ppt 에 있음.
"""

print('나의 이름은 {0} 이고 나이는 {1} 입니다 {2}.'.format(name, age, c))
print('나의 이름은 {2} 이고 나이는 {0} 입니다 {1}.'.format(name, age, c))
print('나의 이름은 {} 이고 나이는 {} 입니다 {}.'.format(name, age, c))  # 순서대로 들어가면 숫자 생략이 가능하다
print('나의 이름은 {} 이고 나이는 {} 입니다 {:4.2f}.'.format(name, age, c))  # 즉 이경우는 . 포함하여 최소 4자리를 보여줌. ex 3/3 = 1.00
# 소수자리가 너무 길다면 콜론 넣어 조절가능 m.n m은 최소전체길이(. 콤마를 포함함). n은 소수점 이하의 길이
print('나의 이름은 {name} 이고 나이는 {age} 입니다 {c}.'.format(name= 'seop', age= 25, c=2.3))  # 소수자리가 너무 길다면 콜론 넣어 조절가능





